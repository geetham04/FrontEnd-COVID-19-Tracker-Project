{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Footer/footer.jsx","components/Timer/timer.jsx","components/Header/header.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Footer/footer.module.css","components/Timer/timer.module.css","components/Header/header.module.css","images/covidlogo.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","lastUpdated","Typography","color","variant","display","align","Date","toLocaleString","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","ClassNames","card","infected","CardContent","gutterBottom","start","end","value","duration","separator","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchDailyDataPerDay","deltaConfirmed","fetchCountries","countries","name","Chart","useState","setDailyData","dailyDataPerDay","setDailyDataPerDay","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","options","title","text","BarChart","barChart","id","legend","pieChart","doughnutChart","polarChart","CountryPicker","dealCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","Footer","year","getFullYear","Timer","state","time","this","setState","setInterval","currentTime","toLocaleTimeString","Component","Header","class","App","fetchedData","hour","getHours","image","src","covidImage","alt","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.196d493e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__21z97\",\"card\":\"Cards_card__1X8rT\",\"infected\":\"Cards_infected__1_Ieh\",\"recovered\":\"Cards_recovered__1RsA0\",\"deaths\":\"Cards_deaths__1GbWI\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid, StylesProvider } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport ClassNames from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\n// functional component\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\nconst lastUpdated = \r\n      <Typography color=\"textPrimary\" variant=\"caption\" display=\"block\" align='center'>\r\n        Last Updated at {new Date(lastUpdate).toLocaleString()}\r\n      </Typography>;    \r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n          {lastUpdated},\r\n          <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className={ClassNames(styles.card, styles.infected)}>\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                Infected\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                    <CountUp\r\n                      start={0}\r\n                      end={confirmed.value}\r\n                      duration={2.5}\r\n                      separator=\",\"\r\n                    />\r\n                </Typography>\r\n                {/* <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n                </Typography> */}\r\n                <Typography variant=\"body2\">\r\n                Number of active cases of COVID-19\r\n                </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={ClassNames(styles.card, styles.recovered)}>\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                    <CountUp\r\n                      start={0}\r\n                      end={recovered.value}\r\n                      duration={2.5}\r\n                      separator=\",\"\r\n                    />\r\n                </Typography>\r\n                {/* <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n                </Typography> */}\r\n                <Typography variant=\"body2\">\r\n                Number of recoveries from COVID-19\r\n                </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={ClassNames(styles.card, styles.deaths)}>\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                    <CountUp\r\n                      start={0}\r\n                      end={deaths.value}\r\n                      duration={2.5}\r\n                      separator=\",\"\r\n                    />\r\n                </Typography>\r\n                {/* <Typography color=\"textSecondary\">\r\n                {new Date(lastUpdate).toDateString()}\r\n                </Typography> */}\r\n                <Typography variant=\"body2\">\r\n                Number of deaths caused by COVID-19\r\n                </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n          </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","// importing axios - used to make API requests\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        \r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyDataPerDay = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.deltaConfirmed,\r\n            deaths: dailyData.deaths.value,\r\n            date: dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchLastUpdate = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            lastupdated: dailyData.lastUpdate,\r\n        }));\r\n        return modifiedData;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries }} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n      console.log(error);  \r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData, fetchDailyDataPerDay } from '../../api';\r\nimport { Line, Bar, Pie, Doughnut, Polar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\n// functional component\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    const [dailyDataPerDay, setDailyDataPerDay] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n            setDailyDataPerDay(await fetchDailyDataPerDay());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n// eslint-disable-next-line no-unused-expressions\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n          ? (\r\n            <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.7)',\r\n                    fill: true\r\n                }],\r\n            }}\r\n            options={{\r\n                  title: { display: true, text:`Daily Cases Growth` },\r\n                }}\r\n          />) : null\r\n    );\r\n\r\n    const BarChart = (\r\n      dailyDataPerDay.length\r\n        ? (\r\n          <Bar\r\n          data={{\r\n              labels: dailyDataPerDay.map(({ date }) => date),\r\n              datasets: [{\r\n                  data: dailyDataPerDay.map(({ confirmed }) => confirmed),\r\n                  label: 'Globally Infected',\r\n                  borderColor: '#3333ff',\r\n                  backgroundColor: 'blue',\r\n                  fill: true\r\n              }]\r\n          }}\r\n          options={{\r\n                  title: { display: true, text:`Daily Infected Cases Timeline` },\r\n                }}\r\n        />) : null\r\n  );\r\n\r\n    console.log(confirmed, recovered, deaths);\r\n\r\n    const barChart = (\r\n        confirmed\r\n          ? (\r\n            <div id=\"chart-wrapper\">\r\n              <Bar\r\n                data={{\r\n                  labels: [\r\n                    'Infected',\r\n                    'Recovered', \r\n                    'Deaths'\r\n                    ],\r\n                  datasets: [{\r\n                    label: 'people',\r\n                    backgroundColor: [\r\n                       'rgba(0, 0, 255, 0.7)',\r\n                       'rgba(0, 96, 96, 0.7)',\r\n                       'rgba(255, 0, 0, 0.7)'\r\n                    ],\r\n                    data:[\r\n                      confirmed.value, \r\n                      recovered.value, \r\n                      deaths.value\r\n                      ]  \r\n                  }]\r\n                }}\r\n                options={{\r\n                  legend: { display: false }, \r\n                  title: { display: true, text:`${country} country data in bar chart` },\r\n                }}\r\n             />\r\n             </div>\r\n          ) : null\r\n    )\r\n\r\n    const pieChart = (\r\n        confirmed\r\n          ? (\r\n            <div id=\"chart-wrapper\">\r\n              <Pie\r\n                data={{\r\n                  labels: [\r\n                    'Infected',\r\n                    'Recovered', \r\n                    'Deaths'\r\n                    ],\r\n                  datasets: [{\r\n                    label: 'people',\r\n                    backgroundColor: [\r\n                       'rgba(0, 0, 255, 0.7)',\r\n                       'rgba(0, 96, 96, 0.7)',\r\n                       'rgba(255, 0, 0, 0.7)'\r\n                    ],\r\n                    data:[\r\n                      confirmed.value, \r\n                      recovered.value, \r\n                      deaths.value\r\n                      ]  \r\n                  }]\r\n                }}\r\n                options={{\r\n                  legend: { display: false }, \r\n                  title: { display: true, text:`${country} country data in pie chart` },\r\n                }}\r\n             />\r\n             </div>\r\n          ) : null\r\n    )\r\n    const doughnutChart = (\r\n      confirmed\r\n        ? (\r\n          <div id=\"chart-wrapper\">\r\n            <Doughnut\r\n              data={{\r\n                labels: [\r\n                  'Infected',\r\n                  'Recovered', \r\n                  'Deaths'\r\n                  ],\r\n                datasets: [{\r\n                  label: 'people',\r\n                  backgroundColor: [\r\n                     'rgba(0, 0, 255, 0.7)',\r\n                     'rgba(0, 96, 96, 0.7)',\r\n                     'rgba(255, 0, 0, 0.7)'\r\n                  ],\r\n                  data:[\r\n                    confirmed.value, \r\n                    recovered.value, \r\n                    deaths.value\r\n                    ]  \r\n                }]\r\n              }}\r\n              options={{\r\n                legend: { display: false }, \r\n                title: { display: true, text:`${country} country data in doughnut chart` },\r\n              }}\r\n           />\r\n           </div>\r\n        ) : null\r\n  )\r\n  const polarChart = (\r\n    confirmed\r\n      ? (\r\n        <div id=\"chart-wrapper\">\r\n          <Polar\r\n            data={{\r\n              labels: [\r\n                'Infected',\r\n                'Recovered', \r\n                'Deaths'\r\n                ],\r\n              datasets: [{\r\n                label: 'people',\r\n                backgroundColor: [\r\n                   'rgba(0, 0, 255, 0.7)',\r\n                   'rgba(0, 96, 96, 0.7)',\r\n                   'rgba(255, 0, 0, 0.7)'\r\n                ],\r\n                data:[\r\n                  confirmed.value, \r\n                  recovered.value, \r\n                  deaths.value\r\n                  ]  \r\n              }]\r\n            }}\r\n            options={{\r\n              legend: { display: false }, \r\n              title: { display: true, text:`${country} country data in polar chart` },\r\n            }}\r\n         />\r\n         </div>\r\n      ) : null\r\n)\r\n\r\nconst columnChart = (\r\n  confirmed\r\n    ? (\r\n      <div className=\"chart\">\r\n        <Polar\r\n          data={{\r\n            labels: [\r\n              'Infected', \r\n              'Recovered', \r\n              'Deaths'\r\n              ],\r\n            datasets: [{\r\n              label: 'people',\r\n              backgroundColor: [\r\n                 'rgba(0, 0, 255, 0.7)',\r\n                 'rgba(0, 96, 96, 0.7)',\r\n                 'rgba(255, 0, 0, 0.7)'\r\n              ],\r\n              data:[\r\n                confirmed.value, \r\n                recovered.value, \r\n                deaths.value\r\n                ]  \r\n            }]\r\n          }}\r\n          options={{\r\n            legend: { display: false }, \r\n            title: { display: true, text:`Currently showing ${country} country` }\r\n          }}\r\n       /></div>\r\n    ) : null\r\n)\r\n  // const mulcharts = [barChart, pieChart, doughnutChart, polarChart]; \r\n\r\n    return (\r\n        <div className={styles.container}>\r\n          {country ? [barChart, pieChart, doughnutChart, polarChart] : [lineChart, BarChart]}\r\n        </div>       \r\n    )\r\n  }\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\n// functional component\r\nconst CountryPicker = ({ dealCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesAPI = async () => {\r\n            // fetching countries from the API\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchCountriesAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    // console.log(fetchedCountries);\r\n    // Fetching the countries from API. Once the country chosen, it goes back to app.js\r\n    return (\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => dealCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from \"react\";\r\nimport styles from './footer.module.css';\r\n\r\nfunction Footer() {\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer className={styles.container}>\r\n      <p>Copyright ⓒ {year} Geetha Chittuluri @ Portland State University.</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport styles from './timer.module.css';\r\n\r\nclass Timer extends Component {\r\n\r\n  constructor() {\r\n    super()\r\nthis.state={time:new Date()}\r\n  }\r\n\r\n  currentTime()\r\n  {\r\n    this.setState({\r\n      time: new Date()\r\n    })\r\n  }\r\n  componentWillMount()\r\n  {\r\nsetInterval(()=>this.currentTime(),1000)\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div className={styles.container}>\r\n        {this.state.time.toLocaleTimeString()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport Timer from '../Timer/timer';\r\nimport styles from './header.module.css';\r\n//import HighlightIcon from \"@material-ui/icons/Highlight\";\r\n\r\nfunction Header() {\r\n  return (\r\n    \r\n    <nav className={styles.container}> \r\n    <header class=\"redtopbanner text-right mx-xl-5 d-flex align-items-center justify-content-end\">\r\n      <h3>\r\n      <Timer />\r\n      </h3>\r\n    </header>\r\n    </nav> \r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","// importing libraries, components, styles and Image\r\nimport React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker, Timer, Header, Footer } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData, fetchLastUpdate } from './api';\r\nimport { TinyButton  as ScrollUpButton } from \"react-scroll-up-button\";\r\n\r\nimport covidImage from './images/covidlogo.png';\r\n\r\n\r\n// creating class based component\r\nclass App extends React.Component {\r\n    // Initial States\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n    // componentDidMount - making a request to fetchData, which is in the API, returning the data needed\r\n    // once after data fetched, setting it to this.setState\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData });\r\n    }\r\n    // Getting the country as a parameter, making the request one more time to the fetchData API.\r\n    // This time, with the fetchedData, it also changes the country \r\n    dealCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country });\r\n        \r\n        // console.log(fetchedData);\r\n        \r\n        // console.log(country);\r\n\r\n    }\r\n    render() {\r\n        const date = new Date();\r\n        const hour = date.getHours();\r\n        const { data, country } = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <Header />\r\n                {\r\n                hour>=12 ? hour>=16 ? \r\n                <h1>Good Evening, Welcome to Coronavirus tracking application</h1> : <h1>Good Afternoon, Welcome to Coronavirus tracking application</h1> : <h1>Good Morning, Welcome to Coronavirus tracking application</h1>\r\n                }\r\n                <img className={styles.image} src={covidImage} alt=\"COVID-19\" />\r\n                <fetchLastUpdate />\r\n                <Cards data={data} />\r\n                <CountryPicker dealCountryChange={this.dealCountryChange} />\r\n                <Chart data={data} country={country} />\r\n                <Footer />\r\n                <ScrollUpButton />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n \r\n","// importing libraries\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n// rendering App component, root elementid parameters\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1TzQ-\",\"image\":\"App_image__cfh3Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3GEBk\",\"chart-wrapper\":\"Chart_chart-wrapper__2L1ac\",\"main\":\"Chart_main__3b1UC\",\"sub\":\"Chart_sub__1PuzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__2n2gf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"footer_container__2jbTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"timer_container__29fD7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__ckp0f\"};","module.exports = __webpack_public_path__ + \"static/media/covidlogo.3e403142.png\";"],"sourceRoot":""}